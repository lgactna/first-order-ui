# -*- coding: utf-8 -*-
"""first-order-model-demo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/AliaksandrSiarohin/first-order-model/blob/master/demo.ipynb

# Demo for paper "First Order Motion Model for Image Animation"

**Clone repository**
"""
import warnings
import imageio
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from skimage import img_as_ubyte
from skimage.transform import resize
from IPython.display import HTML
from demo import make_animation
from demo import load_checkpoints

warnings.filterwarnings("ignore")

def load_img_and_video(imgpath, videopath):
    source_image = imageio.imread(imgpath)
    driving_video = imageio.mimread(videopath)
    #Resize image and video to 256x256
    source_image = resize(source_image, (256, 256))[..., :3]
    driving_video = [resize(frame, (256, 256))[..., :3] for frame in driving_video]

    return source_image, driving_video

def display(source, driving, generated=None):
    fig = plt.figure(figsize=(8 + 4 * (generated is not None), 6))

    ims = []
    for i in range(len(driving)):
        cols = [source]
        cols.append(driving[i])
        if generated is not None:
            cols.append(generated[i])
        im = plt.imshow(np.concatenate(cols, axis=1), animated=True)
        plt.axis('off')
        ims.append([im])

    ani = animation.ArtistAnimation(fig, ims, interval=50, repeat_delay=1000)
    plt.close()
    return ani
    
#HTML(display(source_image, driving_video).to_html5_video())

"""**Create a model and load checkpoints**"""
def animate_image(source_image, driving_video, savepath, configpath, checkpointpath):
    generator, kp_detector = load_checkpoints(config_path=configpath,
                                checkpoint_path=checkpointpath)

    """**Perform image animation**"""

    predictions = make_animation(source_image, driving_video, generator, kp_detector, relative=True)

    #save resulting video
    imageio.mimsave(savepath, [img_as_ubyte(frame) for frame in predictions])
    #video can be downloaded from /content folder

    #HTML(display(source_image, driving_video, predictions).to_html5_video())

def generate_and_save(imgpath, videopath, savepath, configpath, checkpointpath):
    source_image, driving_video = load_img_and_video(imgpath, videopath)
    animate_image(source_image, driving_video, savepath, configpath, checkpointpath)
